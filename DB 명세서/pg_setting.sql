DROP TABLE RECORDS;
DROP TABLE MALLS;
DROP TABLE BANKS;
DROP TABLE USERS;

CREATE TABLE MALLS(
    MALL_CODE   VARCHAR2(255),
    MALL_NAME   VARCHAR2(255),
    CONSTRAINT MALLS_PK PRIMARY KEY(MALL_CODE)
);

COMMENT ON TABLE MALLS IS '업체';
COMMENT ON COLUMN MALLS.MALL_CODE IS '업체 코드';
COMMENT ON COLUMN MALLS.MALL_NAME IS '업체명';


CREATE TABLE BANKS(
    BANK_CODE   VARCHAR2(255),
    BANK_NAME   VARCHAR2(255),
    CONSTRAINT BANKS_PK PRIMARY KEY(BANK_CODE)
);

COMMENT ON TABLE BANKS IS '은행';
COMMENT ON COLUMN BANKS.BANK_CODE IS '은행 코드';
COMMENT ON COLUMN BANKS.BANK_NAME IS '은행명';


CREATE TABLE USERS(
    USERID          VARCHAR2(255),
    PASSWORD        VARCHAR2(255),
    EMAIL           VARCHAR2(255),
    PHONE_NUMBER    VARCHAR2(255),
    NAME            VARCHAR2(255),
    CONSTRAINT USERS_PK PRIMARY KEY(USERID),
    CONSTRAINT USERS_UNIQUE UNIQUE(EMAIL)
);

COMMENT ON TABLE USERS IS 'PG 사용자';
COMMENT ON COLUMN USERS.USERID IS '사용자 아이디';
COMMENT ON COLUMN USERS.PASSWORD IS '비밀번호';
COMMENT ON COLUMN USERS.EMAIL IS '사용자 이메일';
COMMENT ON COLUMN USERS.PHONE_NUMBER IS '사용자 전화번호';
COMMENT ON COLUMN USERS.NAME IS '사용자 이름';


CREATE TABLE RECORDS(
    RECORD_NO   NUMBER(38,0),
    USERID      VARCHAR2(255),
    PRICE       NUMBER(38,0),
    MALL_CODE   VARCHAR2(255),
    BANK_CODE   VARCHAR2(255),
    RECORD_DATE TIMESTAMP,
    CONSTRAINT RECORDS_PK PRIMARY KEY(RECORD_NO),
    CONSTRAINT RECORDS_FK_USERID FOREIGN KEY(USERID) REFERENCES USERS(USERID),
    CONSTRAINT RECORDS_FK_MALL_CODE FOREIGN KEY(MALL_CODE) REFERENCES MALLS(MALL_CODE),
    CONSTRAINT RECORDS_FK_BANK_CODE FOREIGN KEY(BANK_CODE) REFERENCES BANKS(BANK_CODE)
);

COMMENT ON TABLE RECORDS IS '거래 내역';
COMMENT ON COLUMN RECORDS.RECORD_NO IS '거래 내역 번호';
COMMENT ON COLUMN RECORDS.USERID IS '사용자 아이디';
COMMENT ON COLUMN RECORDS.PRICE IS '결제 금액';
COMMENT ON COLUMN RECORDS.MALL_CODE IS '업체 코드';
COMMENT ON COLUMN RECORDS.BANK_CODE IS '은행 코드';
COMMENT ON COLUMN RECORDS.RECORD_DATE IS '거래 날짜';

DROP SEQUENCE SEQ_RECORD_NO;
CREATE SEQUENCE SEQ_RECORD_NO START WITH 1 INCREMENT BY 1 CACHE 2 ORDER NOCYCLE;